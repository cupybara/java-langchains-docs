"use strict";(self.webpackChunkjava_langchains_docs=self.webpackChunkjava_langchains_docs||[]).push([[39],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Quickstart",s={unversionedId:"getting-started/quickstart",id:"getting-started/quickstart",title:"Quickstart",description:"After creating a new maven project and adding the dependency as described in Installing modify the Main class and add the following code",source:"@site/docs/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/docs/getting-started/quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/quickstart.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installing",permalink:"/docs/getting-started/install"},next:{title:"Packages",permalink:"/docs/category/packages"}},c={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"After creating a new maven project and adding the dependency as described in ",(0,r.kt)("a",{parentName:"p",href:"./install"},"Installing")," modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"Main")," class and add the following code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="/src/your/package/name/Main.java"',title:'"/src/your/package/name/Main.java"'},'public class Main {\n    public static void main(String[] args) {\n        OpenAiChatCompletionsChain chain = new OpenAiChatCompletionsChain(\n            "Hello, this is ${name}", \n            new OpenAiChatCompletionsParameters().model("gpt-3.5-turbo").temperature(0D), // also allows to set more parameters\n            System.getenv("OPENAI_API_KEY"),\n            "You are a helpful assistant who answers questions to ${name}" // optional systemTemplate \n        );\n\n        String result = chain.run(Collections.singletonMap("name", "Manuel"));\n        // the above outputs something like: "Hello Manuel, how are you"\n    }\n}\n')),(0,r.kt)("p",null,"This requires an environment variable containing your OpenAI API key which has to be set with your OS specific command beforehand."),(0,r.kt)("p",null,"The above example illustrates a very basic chain which only contains an OpenAI interaction with a ",(0,r.kt)("inlineCode",{parentName:"p"},"gpt-3.5-turbo")," model which is given the system context of being a helpful assistant that responds to the user's prompts. This basic chain can be extended using different already implemented chains or custom implementations that adhere to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cupybara/java-langchains/tree/master/src/main/java/io/github/cupybara/javalangchains/chains/Chain.java"},"Chain")," interface interface.\nOne such example is the consecutive execution of different OpenAI prompts like in the following snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Chain<Map<String, String>, String> chain = new OpenAiChatCompletionsChain(\n        "Hello, this is ${name}. What is your name?", parameters, System.getenv("OPENAI_API_KEY"))\n    .chain(prev -> Collections.singletonMap("result", prev))\n    .chain(new OpenAiChatCompletionsChain("What was the question for the following answer: ${result}", \n        parameters, System.getenv("OPENAI_API_KEY")));\n\nString result = chain.run(Collections.singletonMap("name", "Manuel"));\n')),(0,r.kt)("p",null,"For further use case examples which contain more complex chains check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/use-cases"},"Use Cases section"),"."))}m.isMDXComponent=!0}}]);